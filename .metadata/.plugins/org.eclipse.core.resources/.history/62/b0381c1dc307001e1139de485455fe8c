package fr.freestyle.hawman.Service;

import fr.freestyle.hawman.Bean.Users;
import fr.freestyle.hawman.Repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
    @Autowired
    RoleService roleService;

    // CRUD - C
    public boolean create(Users user) {
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        user.setPassword(encoder.encode(user.getPassword()));

        if (userRepository.save(user) != null) {
            return true;
        } else {
            return false;
        }
    }
    // FIN CRUD - C

    // CRUD - R
    public List<Users> read() {
        return userRepository.findAll();
    }
    // FIN CRUD - R

    // CRUD - U
    public boolean update(Users user) {
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        user.setPassword(encoder.encode(user.getPassword()));

        if (userRepository.save(user) != null) {
            return true;
        } else {
            return false;
        }
    }
    // FIN CRUD - U

    // CRUD - D
    public boolean delete(Lonf id) {
        userRepository.deleteById(id);

        if (userRepository.findById(id).isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
    // FIN CRUD - D
    
    public Users getUserById(Long userId) {
        Optional<Users> userOptional = userRepository.findById(userId);
        return userOptional.orElse(null);
    }
    // FindBy........
    public Users getUserByEmail(String mail) {
        return userRepository.findByEmail(mail);
    }

    public boolean delete(int id) {
		userRepository.deleteById(id);

		if (userRepository.findById(id).isEmpty()) {
			return true;
		} else {
			return false;
		}
}
