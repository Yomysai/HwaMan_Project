/**
 * 
 */
package fr.freestyle.hawman.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import fr.freestyle.hawman.Bean.Users;
import fr.freestyle.hawman.Service.UserService;

/**
 * @author aly_d
 *
 */
@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class UserController {
    @Autowired
    private UserService userService;

    // CRUD Create
    @PostMapping("/user")
    public ResponseEntity<String> createUser(@RequestBody Users user) {
        if (userService.getUserByEmail(user.getEmail()) != null) {
            return new ResponseEntity<String>("Le mail existe déjà", HttpStatus.BAD_REQUEST);
        }
        if (userService.create(user)) {
            return new ResponseEntity<String>("Utilisateur ajouté", HttpStatus.CREATED);
        } else {
            return new ResponseEntity<String>("Erreur lors de la création de l'utilisateur", HttpStatus.BAD_REQUEST);
        }
    }

//    // CRUD Read
//    @GetMapping("/users")
//    public List<Users> getAllUsers() {
//        return userService.read();
//    }
//
//    // CRUD Update
//    @PutMapping("/users/{id}")
//    public ResponseEntity<String> updateUser(@PathVariable("userId") Long id, @RequestBody Users user) {
//        Users existingUser = userService.getUserById(id);
//        if (existingUser == null) {
//            return new ResponseEntity<String>("Utilisateur non trouvé", HttpStatus.NOT_FOUND);
//        }
//        existingUser.setUsername(user.getUsername());
//        existingUser.setEmail(user.getEmail());
//        // Mettez à jour les autres attributs de l'utilisateur selon vos besoins
//
//        if (userService.update(existingUser)) {
//            return new ResponseEntity<String>("Utilisateur mis à jour", HttpStatus.OK);
//        } else {
//            return new ResponseEntity<String>("Erreur lors de la mise à jour de l'utilisateur", HttpStatus.BAD_REQUEST);
//        }
//    }
//
//    // CRUD Delete
//    @DeleteMapping("/users/{id}")
//    public ResponseEntity<String> deleteUser(@PathVariable("id") Long id) {
//        if (userService.delete(id)) {
//            return new ResponseEntity<String>("Utilisateur supprimé", HttpStatus.OK);
//        } else {
//            return new ResponseEntity<String>("Erreur lors de la suppression de l'utilisateur", HttpStatus.BAD_REQUEST);
//        }
//    }
}

