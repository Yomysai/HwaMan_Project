/**
 * 
 */
package fr.freestyle.hawman.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import fr.freestyle.hawman.Bean.Users;
import fr.freestyle.hawman.Service.UserService;

/**
 * @author aly_d
 *
 */
@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class UserController {
    @Autowired
    private UserService userService;

    // CRUD Create
    @PostMapping("/users")
    public ResponseEntity<String> createUser(@RequestBody Users user) {
        if (userService.getUserByEmail(user.getEmail()) != null) {
            return new ResponseEntity<String>("Le mail existe déjà", HttpStatus.BAD_REQUEST);
        }
        if (userService.createUser(user)) {
            return new ResponseEntity<String>("Utilisateur ajouté", HttpStatus.CREATED);
        } else {
            return new ResponseEntity<String>("Erreur lors de la création de l'utilisateur", HttpStatus.BAD_REQUEST);
        }
    }

    // CRUD Read
    @GetMapping("/users")
    public List<Users> getAllUsers() {
        return userService.getAllUsers();
    }

    // CRUD Update
    @PutMapping("/users/{id}")
    public ResponseEntity<String> updateUser(@PathVariable("id") Long id, @RequestBody Users user) {
        Users existingUser = userService.getUserById(id);
        if (existingUser == null) {
            return new ResponseEntity<String>("Utilisateur non trouvé", HttpStatus.NOT_FOUND);
        }
        existingUser.setUsername(user.getUsername());
        existingUser.setEmail(user.getEmail());
        // Mettez à jour les autres attributs de l'utilisateur selon vos besoins

        if (userService.updateUser(existingUser)) {
            return new ResponseEntity<String>("Utilisateur mis à jour", HttpStatus.OK);
        } else {
            return new ResponseEntity<String>("Erreur lors de la mise à jour de l'utilisateur", HttpStatus.BAD_REQUEST);
        }
    }

    // CRUD Delete
    @DeleteMapping("/users/{id}")
    public ResponseEntity<String> deleteUser(@PathVariable("id") Long id) {
        if (userService.deleteUser(id)) {
            return new ResponseEntity<String>("Utilisateur supprimé", HttpStatus.OK);
        } else {
            return new ResponseEntity<String>("Erreur lors de la suppression de l'utilisateur", HttpStatus.BAD_REQUEST);
        }
    }
}

